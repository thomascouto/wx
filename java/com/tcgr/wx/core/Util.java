package com.tcgr.wx.core;import android.content.Context;import android.content.DialogInterface;import android.database.Cursor;import android.support.v7.app.AlertDialog;import android.view.MenuItem;import android.view.View;import com.tcgr.wx.base.Notam;import com.tcgr.wx.core.interfaces.Constants;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutput;import java.io.ObjectOutputStream;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Locale;/** * Created by thomas on 26/11/15. * <p/> * Classe Utilit√°ria */public class Util {//    /**//     * @param activity activity//     *///    public static void hideKeyboard(Activity activity) {//        View view = activity.getCurrentFocus();//        if (view != null) {//            InputMethodManager inputManager = (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);//            inputManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);//        }//    }    /**     * Serializa objeto para a classe NotamFragment     *     * @param o Objeto     * @return bytes     * @see com.tcgr.wx.ui.fragment.NotamFragment#onOptionsItemSelected(MenuItem)     */    public static byte[] serializeObject(Object o) {        ByteArrayOutputStream bos = new ByteArrayOutputStream();        try {            ObjectOutput out = new ObjectOutputStream(bos);            out.writeObject(o);            out.close();            // Get the bytes of the serialized object            return bos.toByteArray();        } catch (IOException e) {            e.printStackTrace();            return null;        }    }    /**     * De-Serializa array de Bytes em Objeto.     *     * @param b array de bytes     * @return Objeto serializado     * @see com.tcgr.wx.ui.fragment.NotamFragment#onClick(View)     */    public static ArrayList<Notam> deserializeObject(byte[] b) {        try {            ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(b));            @SuppressWarnings("unchecked") ArrayList<Notam> object = (ArrayList<Notam>) in.readObject();            in.close();            return object;        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * @param date Data no formato AIS-WEB '15 11 25 20 06'     * @return data no formato dd/MM/yy hh:mm (25/11/15 20:06)     */    public static String formatNotamDate(String date) {        SimpleDateFormat sdf = new SimpleDateFormat("yyMMddkkmm", Locale.US);        try {            Date d = sdf.parse(date);            date = new SimpleDateFormat("dd/MM/yyyy kk:mm", Constants.BRAZIL).format(d);        } catch (ParseException e) {            e.printStackTrace();        }        return date;    }    /**     * Alert Dialog     *     * @param context context     * @param msg     mensagem     */    public static void alert(Context context, String msg) {        final AlertDialog alertDialog = new AlertDialog.Builder(context).create();        alertDialog.setMessage(msg);        alertDialog.setButton(DialogInterface.BUTTON_POSITIVE, "Ok", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                alertDialog.dismiss();            }        });        alertDialog.show();    }    /**     * Percorre o Cursor e gera uma Lista com os dados.     *     * @param c Cursor     * @return ArrayList     */    private static ArrayList<String> cursorToList(Cursor c) {        ArrayList<String> list = new ArrayList<>();        if (c != null) {            if (c.moveToFirst()) {                do {                    list.add(c.getString(0));                } while (c.moveToNext());            }            c.close();        }        return list;    }    /**     * Cursor to Array[] {@link #cursorToList(Cursor)}     *     * @param c Cursor     * @return String[]     */    public static String[] cursorToArray(Cursor c) {        List<String> list = cursorToList(c);        return list.toArray(new String[list.size()]);    }    /**     * Gera place holder's para consulta SQLite.     * <p/>     * EX: (?,?,?,?)     *     * @param length tamanho do array, que sera' a quantidade de placeholders gerada.     * @return Placeholders     */    public static String makePlaceHolder(int length) {        if (length == 1) {            return "?";        } else {            StringBuilder stringBuilder = new StringBuilder(length * 2 - 1);            stringBuilder.append("?");            for (int i = 0; i < length; i++) {                stringBuilder.append(",?");            }            return stringBuilder.toString();        }    }}